from database import db
from settings import TELEGRAM_TOKEN
import telebot
from keyboard import *

bot = telebot.TeleBot(TELEGRAM_TOKEN)



def system_message_filter(message):
    '''–í —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç –∫–∞–∫–æ–µ –ª–∏–±–æ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥, –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
       —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É, –∞ –Ω–µ –æ—Ç—Ä–∞–±–∞—ã–≤–∞–µ—Ç –æ–ø—Ä–µ–¥–ª–µ–Ω–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä'''
    user = db.get_or_create_user(message.chat)
    if user['companion_id']:
        return chat(message)

@bot.message_handler(commands=['start', 'help'])
def command_start(message):
    user = db.get_or_create_user(message.chat)
    if user['companion_id']:
        bot.send_message(chat_id=user['companion_id'], text='–í–∞—à —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª –±–µ—Å–µ–¥—É, –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞', reply_markup=main_keyboard())
        rating_message(message)
        db.cancel_search(message.chat.id)
    return bot.send_message(chat_id=message.chat.id, text='–≠—Ç–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞', reply_markup=main_keyboard())



@bot.message_handler(regexp="^(–ù–∞—Å—Ç—Ä–æ–π–∫–∏)$")
def settings_user(message):
    if system_message_filter(message):  return
    return bot.send_message(chat_id=message.chat.id, text='–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Ä–æ–ª—å', reply_markup=settings_keyboard())


@bot.message_handler(regexp="^(–Ø —Ö–æ—á—É –ø–æ–º–æ—á—å)$")
def i_want_help(message):
    if system_message_filter(message):  return
    db.helper(message.chat.id, True)
    bot.send_message(chat_id=message.chat.id, text='–í–∞—à–∞ —Ä–æ–ª—å - –Ø —Ö–æ—á—É –ø–æ–º–æ—á—å', reply_markup=main_keyboard())


@bot.message_handler(regexp="^(–ú–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å)$")
def i_need_help(message):
    if system_message_filter(message):  return
    db.helper(message.chat.id, False)
    bot.send_message(chat_id=message.chat.id, text='–í–∞—à–∞ —Ä–æ–ª—å - –º–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å', reply_markup=main_keyboard())

@bot.message_handler(regexp="^(–ú–æ–π —Ä–µ–π—Ç–∏–Ω–≥)$")
def my_rating(message):
    if system_message_filter(message):  return
    user = db.get_user_on_id(message.chat.id)
    return bot.send_message(chat_id=message.chat.id, text=f'–í–∞—à —Ä–µ–π—Ç–∏–Ω–≥: {user["rating"]}.')


@bot.message_handler(regexp="^(–ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞)$")
def companion(message):
    if system_message_filter(message):  return
    user = db.get_or_create_user(message.chat)
    if user['helper'] is None:
        return bot.send_message(chat_id=message.chat.id, text='–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ä–æ–ª—å, –¥–ª—è —ç—Ç–æ–≥–æ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', reply_markup=main_keyboard())

    answer = db.search_companion(message.chat.id)

    user = db.get_or_create_user(message.chat)  # –≤—Ç–æ—Ä–æ–π —Ä–∞–∑ –ø–æ–ª—É—á–∞–µ–º —é–∑–µ—Ä–∞ –ø–æ—Ç–æ–º—É —á—Ç–æ –≤ search_companion() —é–∑–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω
    if answer:
        bot.send_message(chat_id=user['companion_id'], text=f'–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –†–µ–π—Ç–∏–Ω–≥ –≤–∞—à–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞: {user["rating"]}. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ.', reply_markup=control_companion())
        companion_user = db.get_user_on_id(user['companion_id'])
        return bot.send_message(chat_id=message.chat.id, text=f'–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –†–µ–π—Ç–∏–Ω–≥ –≤–∞—à–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞: {companion_user["rating"]}. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ.', reply_markup=control_companion())
    return bot.send_message(chat_id=message.chat.id, text='–ò–¥–µ—Ç –ø–æ–∏—Å–∫', reply_markup=control_companion(next=False))


@bot.message_handler(regexp='^(–°–ª–µ–¥—É—é—â–∏–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫)$')
def next_companion(message):
    bot.delete_message(message.chat.id, message.message_id)
    user = db.get_user_on_id(message.chat.id)
    if not user['companion_id']:
        return companion(message)
    bot.send_message(chat_id=message.chat.id, text='–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞?', reply_markup=yes_no_keyboard('next_companion'))    


@bot.callback_query_handler(func=lambda call: call.data.split('~')[0] == 'next_companion')
def next_companion_inline(call):
    bot.delete_message(call.message.chat.id, call.message.message_id)
    user = db.get_user_on_id(call.message.chat.id)
    if not user['companion_id']:
        return companion(call.message)
    if call.data.split('~')[1] == 'yes':
        user = db.get_user_on_id(call.message.chat.id)
        bot.send_message(chat_id=user['companion_id'], text='–í–∞—à —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª –±–µ—Å–µ–¥—É, –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞', reply_markup=main_keyboard())
        rating_message(call.message)
        db.next_companion(call.message.chat.id)
        companion(call.message)


def rating_message(message):
    user = db.get_user_on_id(message.chat.id)
    rating_message_companion = bot.send_message(chat_id=user['companion_id'], text='–ö–∞–∫ –≤—ã –æ—Ü–µ–Ω–∏—Ç–µ –≤–∞—à–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞?', reply_markup=rating_keyboard())
    rating_data_companion = {
        'user_id': message.chat.id,
        'message_id': rating_message_companion.message_id 
    }
    db.push_data_rating_companion(user['companion_id'], rating_data_companion)

    rating_message = bot.send_message(chat_id=message.chat.id, text='–ö–∞–∫ –≤—ã –æ—Ü–µ–Ω–∏—Ç–µ –≤–∞—à–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞?', reply_markup=rating_keyboard())
    rating_data = {
        'user_id': user['companion_id'],
        'message_id': rating_message.message_id
    }
    db.push_data_rating_companion(message.chat.id, rating_data)


@bot.callback_query_handler(func=lambda call: call.data.split('~')[0] == 'rating')
def rating_handler(call):
    data_rating = db.get_data_rating_companion(call.message.chat.id, call.message.message_id)
    if call.data.split('~')[1] == "+":
        count = 1
    else:
        count = -2
    db.inc_rating(data_rating['user_id'], count)
    db.delete_data_rating_companion(call.message.chat.id, call.message.message_id)
    bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id)
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–°–ø–∞—Å–∏–±–æ, –≤–∞—à –≥–æ–ª–æ—Å —É—á—Ç–µ–Ω!')


@bot.message_handler(regexp='^(–°—Ç–æ–ø)$')
def stop_search_handler(message):
    user = db.get_or_create_user(message.chat)
    if user['companion_id']:
        bot.send_message(chat_id=user['companion_id'], text='–í–∞—à —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª –±–µ—Å–µ–¥—É, –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞', reply_markup=main_keyboard())
        rating_message(message)
        db.cancel_search(message.chat.id)
    bot.send_message(chat_id=message.chat.id, text='–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –¥–∏–∞–ª–æ–≥.', reply_markup=main_keyboard())


@bot.message_handler(regexp="^(–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏)$")
def support_handler(message):
    if system_message_filter(message):  return
    bot.send_message(chat_id=message.chat.id, text="–ï—Å–ª–∏ –≤—ã —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å —Å –ø—Ä–æ–±–ª–µ–º–æ–π –∏–ª–∏ –æ—à–∏–±–∫–æ–π –≤ –±–æ—Ç–µ, –¥–∞–π—Ç–µ –Ω–∞–º –∑–Ω–∞—Ç—å.\n–í—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –Ω–∞—à–µ–π —Å–ª—É–∂–±–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏: @kyle_krn",
                     reply_markup=support_keyboard())


@bot.message_handler(regexp="^(–ù–∞–∑–∞–¥)$")
def back_handler(message):
    if system_message_filter(message):  return
    bot.send_message(chat_id=message.chat.id, text='üëã', reply_markup=main_keyboard())

@bot.message_handler(func=lambda message: True, content_types=['text', 'photo', 'voice', 'sticker', 'video', 'video_note'])
def chat(message):
    user = db.get_or_create_user(message.chat)
    if not user['companion_id']:
        return
    if message.text:
        # return bot.send_message(chat_id=user['companion_id'], text=message.text)
        return bot.send_message(chat_id=user['companion_id'], text="<u><b>–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø–∏—à–µ—Ç:</b></u>\n\n"+message.text, parse_mode='HTML')
    elif message.photo:
        # return bot.send_photo(user['companion_id'], message.photo[-1].file_id, message.caption)
        return bot.send_photo(user['companion_id'], message.photo[-1].file_id, caption='<u><b>–§–æ—Ç–æ –æ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞:</b></u>\n\n' + (message.caption or ''), parse_mode='HTML')
    elif message.video:
        # return bot.send_video(user['companion_id'], message.video.file_id, caption=(message.caption or ''))
        return bot.send_video(user['companion_id'], message.video.file_id, caption='<u><b>–í–∏–¥–µ–æ –æ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞:</b></u>\n\n' + (message.caption or ''), parse_mode='HTML')
    elif message.voice:
        # return bot.send_voice(user['companion_id'], message.voice.file_id)
        bot.send_message(chat_id=user['companion_id'], text='<u><b>–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞:</b></u>', parse_mode='HTML')
        return bot.send_voice(user['companion_id'], message.voice.file_id)
    elif message.video_note:
        # return bot.send_video_note(user['companion_id'], message.video_note.file_id)
        bot.send_message(chat_id=user['companion_id'], text='<u><b>–í–∏–¥–µ–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞:</b></u>', parse_mode='HTML')
        return bot.send_video_note(user['companion_id'], message.video_note.file_id)
    elif message.sticker:
        # return bot.send_sticker(user['companion_id'], message.sticker.file_id)
        bot.send_message(chat_id=user['companion_id'], text='<u><b>–°—Ç–∏–∫–µ—Ä –æ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞:</b></u>', parse_mode='HTML')
        return bot.send_sticker(user['companion_id'], message.sticker.file_id)
