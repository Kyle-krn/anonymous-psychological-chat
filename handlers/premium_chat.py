from database import db
from keyboard import *
from handlers.handlers import bot, system_message_filter, blocked_filter, send_view_premium_rating
from datetime import datetime
from statistics import mean

 
@bot.message_handler(regexp='(^–ù–∞—á–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é($|\süìí))')
def confirm_premium_chat(message):
    user = db.get_user_by_id(message.chat.id)
    if blocked_filter(message):    return
    if not user['companion_id']:    return
    companion_user = db.get_user_by_id(user['companion_id'])
    if companion_user['helper'] is not True:    return
    if companion_user['verified_psychologist'] is not True:    return
    text = f'–¶–µ–Ω–∞ –∑–∞ 1 —á–∞—Å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ --> {companion_user["about_me"]["price"]} —Ä—É–±–ª–µ–π\n' \
            '–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å —ç—Ç–æ—Ç —á–∞—Å?\n' \
            '–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Å–∏—Ö–æ–ª–æ–≥ –Ω–µ —Å–º–æ–∂–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ —á–∞—Å–∞ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —á–∞—Ç, —ç—Ç–æ –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤—ã.'
    bot.send_message(message.chat.id, text=text, reply_markup=yes_no_keyboard('start_premium_chat'))

@bot.callback_query_handler(func=lambda call: call.data.split('~')[0] == 'start_premium_chat')
def start_premium_chat(call):
    try:
        bot.delete_message(call.message.chat.id, call.message.message_id)
        if call.data.split('~')[1] == 'yes':
            user = db.get_user_by_id(call.message.chat.id)
            companion_user = db.get_user_by_id(user['companion_id'])
            price = companion_user["about_me"]["price"]
            if price > user['balance']:
                text = f'–°—Ç–æ–∏–º–æ—Å—Ç—å 1 —á–∞—Å–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ {price} —Ä—É–±–ª–µ–π.\n' \
                    f'–í–∞—à –±–∞–ª–∞–Ω—Å {user["balance"]} —Ä—É–±–ª—è.\n' \
                    f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø—Ä—è–º–æ –∏–∑ –¥–∏–∞–ª–æ–≥–∞.' 
                return bot.send_message(chat_id=call.message.chat.id, text=text, reply_markup=choise_sum_qiwi(price-user['balance']))
            date =  datetime.utcnow().replace(microsecond=0)
            data = {
                'status': 'consumption',
                'date': date,
                'from': user['user_id'],
                'coast': price,
                'for': companion_user['user_id']
            }
            
            db.inc_value(user_id=call.message.chat.id, key='balance', value=-price)
            db.push_value(user_id=call.message.chat.id, key='history_payment', value=data)
            db.set_value(user_id=call.message.chat.id, key='time_start_premium_dialog', value=date)
            data['status'] = 'income'
            db.inc_value(user_id=companion_user["user_id"], key='balance', value=price)
            db.push_value(user_id=companion_user["user_id"], key='history_payment', value=data)
            db.set_value(user_id=companion_user["user_id"], key='time_start_premium_dialog', value=date)
            user = db.get_user_by_id(call.message.chat.id)
            companion_user = db.get_user_by_id(user['companion_id'])
            bot.send_message(chat_id=user['user_id'], text=f'–í—ã —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—Ç–∏–ª–∏ 1 —á–∞—Å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏, –Ω–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ {user["balance"]} —Ä—É–±–ª–µ–π.\n –í —Ç–µ—á–µ–Ω–∏–∏ 1–≥–æ —á–∞—Å–∞ –ø—Å–∏—Ö–æ–ª–æ–≥ –Ω–µ —Å–º–æ–∂–µ—Ç –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –¥–∏–∞–ª–æ–≥, –Ω–æ —ç—Ç–æ –º–æ–∂–µ—Ç–µ –≤—ã.', reply_markup=control_companion())
            bot.send_message(chat_id=companion_user['user_id'], text=f'–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—Ç–∏–ª 1 —á–∞—Å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏, –Ω–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ {companion_user["balance"]} —Ä—É–±–ª–µ–π.\n –í —Ç–µ—á–µ–Ω–∏–∏ 1–≥–æ —á–∞—Å–∞ –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –¥–∏–∞–ª–æ–≥, –Ω–æ —ç—Ç–æ –º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å –≤–∞—à —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫.')
    except Exception as e:
        print(e)

@bot.callback_query_handler(func=lambda call: call.data.split('~')[0] == 'premium_rating')
def premium_rating_handler(call):
    try:
        bot.delete_message(call.message.chat.id, call.message.message_id)
        rating_data = db.get_data_premium_rating_companion(call.message.chat.id, call.message.message_id)
        db.delete_data_premium_rating_companion(call.message.chat.id, call.message.message_id)
        review_for = rating_data['user_id']
        rating = int(call.data.split('~')[1])
        text = f'–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞ - {rating}\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ –ø—Å–∏—Ö–æ–ª–æ–≥–µ, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –Ω–∏–∂–µ.\n–ï—Å–ª–∏ –≤—ã –Ω–µ —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–ª—è—Ç—å –æ—Ç–∑—ã–≤, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É - "–ó–∞–∫–æ–Ω—á–∏—Ç—å".'
        message = bot.send_message(chat_id=call.message.chat.id, text=text, reply_markup=stop_review_keyboard(review_for=review_for, rating=rating))
        bot.register_next_step_handler(message, review_psy, rating, review_for)
    except Exception as e:
        print(e)


@bot.message_handler(commands=['companion_premium_rating'])
def view_command_premium_rating(message):
    '''–ü–æ –∫–æ–º–∞–Ω–¥–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –∏ –æ—Ç–∑—ã–≤—ã, –µ—Å–ª–∏ –µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –≤–µ—Ä–∏—Ñ. –ø—Å–∏—Ö–æ–ª–æ–≥'''
    user = db.get_user_by_id(message.chat.id)
    if not user['companion_id']:    return
    companion_user = db.get_user_by_id(user['companion_id'])
    if companion_user['helper'] is True and companion_user['verified_psychologist'] is True:
        send_view_premium_rating(companion_user)


def review_psy(message, rating, review_for):
    try:
        if message.text:
            review = message.text
            data = {
                'rating': rating,
                'review': review,
                'datetime': datetime.utcnow(),
                'from': message.chat.id
            }
            db.push_value(user_id=review_for, key='premium_rating', value=data)
            bot.send_message(chat_id=message.chat.id, text='–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!')
        else:
            text = '–Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç ü§∑\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
            message = bot.send_message(chat_id=message.chat.id, text=text)
            bot.register_next_step_handler(message, review_psy, rating, review_for)
    except Exception as e:
        print(e)

@bot.callback_query_handler(func=lambda call: call.data.split('~')[0] == 'stop_premium_rating')
def send_rating_without_review(call):
    try:
        bot.delete_message(call.message.chat.id, call.message.message_id)
        review_for = int(call.data.split('~')[1])
        rating = int(call.data.split('~')[2])
        bot.clear_step_handler_by_chat_id(chat_id=call.message.chat.id)
        data = {
                    'rating': rating,
                    'review': '',
                    'datetime': datetime.utcnow(),
                    'from': call.message.chat.id
                }
        db.push_value(user_id=review_for, key='premium_rating', value=data)
        bot.send_message(chat_id=call.message.chat.id, text='–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!')
    except Exception as e:
        print(e)



    