from .handlers import bot, system_message_filter, blocked_filter
from database import db
from keyboard import *


@bot.message_handler(regexp="(^–ù–∞—Å—Ç—Ä–æ–π–∫–∏($|\s‚öô))")
def settings_user(message):
    if system_message_filter(message):  return
    if blocked_filter(message):    return
    db.update_last_action_date(message.chat.id)
    user = db.get_user_by_id(message.chat.id)
    return bot.send_message(chat_id=message.chat.id, text='–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Ä–æ–ª—å', reply_markup=settings_keyboard(user))

@bot.message_handler(regexp="(^–Ø —Ö–æ—á—É –ø–æ–º–æ—á—å($|\süë©‚Äç‚öïÔ∏è))")
def i_want_help(message):
    if system_message_filter(message):  return
    if blocked_filter(message):    return
    db.update_last_action_date(message.chat.id)
    db.helper(message.chat.id, True)
    db.set_value(user_id=message.chat.id, key='premium_search', value=False)
    bot.send_message(chat_id=message.chat.id, text='–í–∞—à–∞ —Ä–æ–ª—å - –Ø —Ö–æ—á—É –ø–æ–º–æ—á—å', reply_markup=main_keyboard())
    user = db.get_user_by_id(message.chat.id)
    if user['verified_psychologist'] is False:
        bot.send_message(chat_id=message.chat.id, text='–í—ã –¥–∏–ø–ª–æ–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥? –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç', reply_markup=verification_keyboard())
    elif user['verified_psychologist'] == 'under_consideration':
        bot.send_message(chat_id=message.chat.id, text='–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏.')
    elif user['verified_psychologist'] is True:
        bot.send_message(chat_id=message.chat.id, text='–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω. –°–¥–µ–ª–∞—Ç—å –ø–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ –ø–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞–º —É –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –µ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞? (–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é, –ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º)', reply_markup=yes_no_keyboard('i_want_help'))

@bot.callback_query_handler(func=lambda call: call.data.split('~')[0] == 'i_want_help')
def i_want_help_callback(call):
    bot.delete_message(call.message.chat.id, call.message.message_id)
    if call.data.split('~')[1] == 'yes':
        db.set_value(user_id=call.message.chat.id, key='premium_search', value=True)
        bot.send_message(chat_id=call.message.chat.id, text='–í—ã–±—Ä–∞–Ω –ø–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ –ø–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞–º —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.')
    else:
        bot.send_message(chat_id=call.message.chat.id, text='–í—ã–±—Ä–∞–Ω –ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º.')
    user = db.get_user_by_id(call.message.chat.id)
    if user['about_me']['price'] == 0:
        bot.send_message(chat_id=call.message.chat.id, text='–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ, –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞—Ç–Ω—ã—Ö —É—Å–ª—É–≥.', reply_markup=about_me_keyboard())


@bot.message_handler(regexp="(^–ú–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å($|\süíÜ‚Äç‚ôÇÔ∏è))")
def i_need_help(message):
    try:
        if system_message_filter(message):  return
        if blocked_filter(message):    return
        user = db.get_user_by_id(message.chat.id)
        db.update_last_action_date(message.chat.id)
        if user['balance'] > 0:
            bot.send_message(chat_id=message.chat.id, text='–ö–æ–≥–æ –∏—Å–∫–∞—Ç—å?', reply_markup=i_need_help_settings_keyboard())
        else:
            db.helper(message.chat.id, False)
            bot.send_message(chat_id=message.chat.id, text='–í–∞—à–∞ —Ä–æ–ª—å - –º–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å.', reply_markup=main_keyboard())
    except Exception as e:
        print(e)

@bot.callback_query_handler(func=lambda call: call.data.split('~')[0] == 'i_need_help')
def i_need_help_callback(call):
    bot.delete_message(call.message.chat.id, call.message.message_id)
    db.helper(call.message.chat.id, False)
    search = call.data.split('~')[1]
    if search == 'all':
        value = False
    elif search == 'verif':
        value = True
    db.set_value(user_id=call.message.chat.id, key='premium_search', value=value)
    text = '–í–∞—à–∞ —Ä–æ–ª—å - –ú–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å\n'
    if value:
        text += '–ü–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤'
    else:
        text += '–ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º'
    return bot.send_message(chat_id=call.message.chat.id, text=text, reply_markup=main_keyboard())


@bot.message_handler(commands=['my_rating'])
@bot.message_handler(regexp="(^–ú–æ–π —Ä–µ–π—Ç–∏–Ω–≥($|\süìà))")
def my_rating(message):
    if blocked_filter(message):    return
    db.update_last_action_date(message.chat.id)
    user = db.get_user_by_id(message.chat.id)
    return bot.send_message(chat_id=message.chat.id, text=f'–í–∞—à —Ä–µ–π—Ç–∏–Ω–≥: {user["rating"]}.')


@bot.message_handler(regexp="(^–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏($|\süó£))")
def support_handler(message):
    if system_message_filter(message):  return
    db.update_last_action_date(message.chat.id)
    bot.send_message(chat_id=message.chat.id, text="–ï—Å–ª–∏ –≤—ã —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å —Å –ø—Ä–æ–±–ª–µ–º–æ–π –∏–ª–∏ –æ—à–∏–±–∫–æ–π –≤ –±–æ—Ç–µ, –¥–∞–π—Ç–µ –Ω–∞–º –∑–Ω–∞—Ç—å.\n–í—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –Ω–∞—à–µ–π —Å–ª—É–∂–±–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏: @TechSupportVeles",
                     reply_markup=support_keyboard())


@bot.message_handler(regexp="(^–ù–∞–∑–∞–¥($|\süîô))")
def back_handler(message):
    if system_message_filter(message):  return
    if blocked_filter(message):    return
    db.update_last_action_date(message.chat.id)
    bot.send_message(chat_id=message.chat.id, text='üëã', reply_markup=main_keyboard())


@bot.callback_query_handler(func=lambda call: call.data.split('~')[0] == 'helper')
def helper_inline_handler(call):
    helper_bool = call.data.split('~')[1]
    if helper_bool == 'true':
        helper_bool = True
        text = '<u><b>–í–∞—à–∞ —Ä–æ–ª—å - –Ø —Ö–æ—á—É –ø–æ–º–æ—á—å</b></u>'
    elif helper_bool == 'false':
        helper_bool = False
        text = '<u><b>–í–∞—à–∞ —Ä–æ–ª—å - –ú–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å</b></u>'
    bot.delete_message(call.message.chat.id, call.message.message_id)
    db.helper(call.message.chat.id, helper_bool)
    bot.send_message(call.message.chat.id, text=text, parse_mode='HTML')
    if helper_bool is True:
        bot.send_message(chat_id=call.message.chat.id, text='–í—ã –¥–∏–ø–ª–æ–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥? –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç ', reply_markup=verification_keyboard())



