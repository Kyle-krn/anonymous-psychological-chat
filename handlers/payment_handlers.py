import telebot 
from datetime import datetime
from .handlers import bot, system_message_filter, blocked_filter
from database import db
from utils import generate_alphanum_random_string
from qiwi import send_bill_api_qiwi, reject_bill_api_qiwi, check_bill_api_qiwi
from keyboard import *


@bot.message_handler(commands=['my_balance'])
@bot.message_handler(regexp="(^–ú–æ–π –±–∞–ª–∞–Ω—Å($|\süí∞))")
def my_balance(message):
    '''–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ—Å—Ç–∞—Ç–æ–∫ –Ω–∞ —Å—á–µ—Ç—É'''
    user = db.get_user_by_id(message.chat.id)
    text = f'–ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç—É --- {user["balance"]} —Ä—É–±.'
    keyboard = None
    if user['history_payment']:
        keyboard = confirm_hisory_payment()
    return bot.send_message(message.chat.id, text=f'–ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç—É --- {user["balance"]} —Ä—É–±.', reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data.split('~')[0] == 'history_balance')
def history_balance(call):
    '''–ò—Å—Ç–æ—Ä–∏—è –±–∞–ª–∞–Ω—Å–∞'''
    if call.data.split('~')[1] == 'close':
        return bot.delete_message(call.message.chat.id, call.message.message_id)
    bot.delete_message(call.message.chat.id, call.message.message_id)
    user = db.get_user_by_id(call.message.chat.id)
    history_payment = user['history_payment']
    page = int(call.data.split('~')[1])
    count_documents = len(history_payment)
    offset = 10
    if len(history_payment) % offset:
        last_page = (count_documents // offset) + 1
    else:
        last_page = count_documents // offset
    next_page = page + 1
    if page == last_page:
        next_page = None
    previous_page = page - 1
    if page == 1:
        previous_page = None
    limit = offset * page
    skip = 0
    if page > 1:
        skip = offset *(page-1)
    history_payment = history_payment[skip:limit]
    keyboard = history_payment_keyboard(history_payment, previous_page, next_page, page)
    bot.send_message(call.message.chat.id, text=f'–ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç—É --- {user["balance"]} —Ä—É–±.', reply_markup=keyboard)


@bot.message_handler(commands=['balance'])
@bot.message_handler(regexp="(^–ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á—ë—Ç($|\süí≥))")
def start_qiwi_order(message):
    return bot.send_message(message.chat.id, text='–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:', reply_markup=choise_sum_qiwi())


@bot.callback_query_handler(func=lambda call: call.data.split('~')[0] == 'qiwi_order')
def create_qiwi_order(call):
    '''–°–æ–∑–¥–∞–µ—Ç –ø–ª–∞—Ç–µ–∂–∫—É –∏ –æ—Ç–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –æ–Ω –º–æ–∂–µ—Ç —Å–∫–∏–ø–Ω—É—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∞"'''
    bot.delete_message(call.message.chat.id, call.message.message_id)
    user = db.get_user_by_id(call.message.chat.id)
    if call.data.split('~')[1] == 'cancel':    return
    if user['companion_id']:
        try:
            bot.send_message(call.message.chat.id, text='–í —Ä–µ–∂–∏–º–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤–µ—Å—Ç–∏ –¥–∏–∞–ª–æ–≥ —Å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º, –≤—Å–µ —á—Ç–æ –±—É–¥–µ—Ç –Ω–∞–ø–∏—Å–∞–Ω–æ –¥–æ –º–æ–º–µ–Ω—Ç–∞ –æ–ø–ª–∞—Ç—ã –∏–ª–∏ –æ—Ç–º–µ–Ω—ã –ø–ª–∞—Ç–µ–∂–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–µ —É–≤–∏–¥–∏—Ç')
            bot.send_message(user['companion_id'], text='–í–∞—à —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø–æ–ø–æ–ª–Ω—è–µ—Ç —Å—á—ë—Ç, –æ–Ω –≤–∏–¥–∏—Ç –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–µ –º–æ–∂–µ—Ç, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.')
        except telebot.apihelper.ApiTelegramException:
            pass
    coast = call.data.split('~')[1]
    coast = int(coast)
    coast_with_commission = int(coast + (coast/100 * 20))
    billid = generate_alphanum_random_string(6)
    bill_data = send_bill_api_qiwi(billid, coast_with_commission, call.message.chat.id)
    bill_date = bill_data[1]
    bill = bill_data[0]
    data = {
                'user_id': call.message.chat.id,
                'status': 'replenishment',
                'date': bill_date,
                'billid': billid,
                'coast_with_commission': coast_with_commission,
                'coast': coast,
                'pay_url': bill['payUrl']
            }
    
    db.set_value(user_id=call.message.chat.id, key='temp_payment', value=data)
    text = f'–ö –æ–ø–ª–∞—Ç–µ {coast_with_commission} —Ä—É–±–ª–µ–π.\n\n' \
            f'–û–ø–ª–∞—Ç–∞ –ø–æ —Å—Å—ã–ª–∫–µ: {bill["payUrl"]}\n\n' \
            f'–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç—ë–∂"\n\n' \
            f'–ï—Å–ª–∏ –≤—ã –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ –∏–ª–∏ –Ω–∞–∂–∞–ª–∏ —Å–ª—É—á–∞–π–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∞"\n\n' \
            '–í —Å–ª—É—á–µ –Ω–µ –æ–ø–ª–∞—Ç—ã, –ø–ª–∞—Ç—ë–∂ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ–Ω–∏—Ç—Å—è —á–µ—Ä–µ–∑ —á–∞—Å –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–∫–∏.'
    message = bot.send_message(call.message.chat.id, text, reply_markup=order_keyboard()) 
    bot.register_next_step_handler(message, get_qiwi_order)         # –î–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –¥—Ä—É–≥–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã –Ω–µ —Ä–∞–±–æ—Ç–∞–ª–∏ –≤–æ –≤—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã –∫–∏–¥–∞–µ–º —é–∑–µ—Ä–∞ –≤ —Ü–∏–∫–ª
    
def get_qiwi_order(message):
    '''–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π –¥–ª—è –æ–ø–ª–∞—Ç—ã (—Å–æ–æ–±—â–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è, –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ –∫–Ω–æ–ø–∫–µ "–û—Ç–º–µ–Ω–∞")'''
    bot.delete_message(message.chat.id, message.message_id)
    bot.delete_message(message.chat.id, message.message_id-1)
    user = db.get_user_by_id(message.chat.id)
    payment = user['temp_payment']
    if payment is None:
        bot.clear_step_handler_by_chat_id(chat_id=message.chat.id)
        return bot.send_message(text='–í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª —É–¥–∞–ª—ë–Ω.')
    text = f'–ö –æ–ø–ª–∞—Ç–µ {payment["coast_with_commission"]} —Ä—É–±–ª–µ–π.\n\n' \
           f'–û–ø–ª–∞—Ç–∞ –ø–æ —Å—Å—ã–ª–∫–µ: {payment["pay_url"]}\n\n' \
           f'–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç—ë–∂"\n\n' \
           f'–ï—Å–ª–∏ –≤—ã –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ –∏–ª–∏ –Ω–∞–∂–∞–ª–∏ —Å–ª—É—á–∞–π–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∞"\n\n' \
           '–í —Å–ª—É—á–µ –Ω–µ –æ–ø–ª–∞—Ç—ã, –ø–ª–∞—Ç—ë–∂ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ–Ω–∏—Ç—Å—è —á–µ—Ä–µ–∑ —á–∞—Å –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–∫–∏.'
    message = bot.send_message(message.chat.id, text, reply_markup=order_keyboard()) 
    bot.register_next_step_handler(message, get_qiwi_order)


@bot.callback_query_handler(func=lambda call: call.data == 'cancel_payment')
def cancel_qiwi_order(call):
    '''–û—Ç–º–µ–Ω–∞ –ø–ª–∞—Ç–µ–∂–∞(–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)'''
    bot.send_message(call.message.chat.id, text='–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–ª–∞—Ç—ë–∂?', reply_markup=yes_no_keyboard('reject'))

@bot.callback_query_handler(func=lambda call: call.data.split('~')[0] == 'reject')
def reject_bill_qiwi(call):
    '''–û—Ç–º–µ–Ω–∞ –ø–ª–∞—Ç–µ–∂–∞'''
    bot.delete_message(call.message.chat.id, call.message.message_id)
    if call.data.split('~')[1] == 'yes':
        bot.delete_message(call.message.chat.id, call.message.message_id-1)
        bot.clear_step_handler_by_chat_id(chat_id=call.message.chat.id)
        user = db.get_user_by_id(call.message.chat.id)
        payment = user['temp_payment']
        reject_bill_api_qiwi(payment['billid'])
        db.set_value(user_id=call.message.chat.id, key='temp_payment', value=None)
        bot.send_message(call.message.chat.id, text='–í–∞—à –ø–ª–∞—Ç—ë–∂ –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω.')


@bot.callback_query_handler(func=lambda call: call.data.split('~')[0] == 'check_payment')
def check_bill_qiwi(call):
    '''–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂'''
    bot.delete_message(call.message.chat.id, call.message.message_id)
    user = db.get_user_by_id(call.message.chat.id)
    payment = user['temp_payment']
    answer = check_bill_api_qiwi(payment['billid'])
    companion = None
    if user['companion_id']:
        companion = db.get_user_by_id(user['companion_id'])
    text = ''
    if answer['status']['value'] == 'EXPIRED':
        '''–ó–∞—è–≤–∫–∞ –∏—Å—Ç–µ–∫–ª–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏'''
        db.set_value(user_id=call.message.chat.id, key='temp_payment', value=None)
        bot.clear_step_handler_by_chat_id(chat_id=call.message.chat.id)
        return bot.send_message(text='–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á—ë—Ç–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∑–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å—Å—ã–ª–∫–∏')

    elif answer['status']['value'] == 'WAITING':
        '''–ó–∞—è–≤–∫–∞ –æ–∂–∏–¥–∞–µ—Ç –ø–ª–∞—Ç–µ–∂–∞'''
        text = f'–°—á—ë—Ç –Ω–µ –æ–ø–ª–∞—á–µ–Ω, –µ—Å–ª–∏ –≤—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –æ–ø–ª–∞—Ç–∏–ª–∏, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 1 –º–∏–Ω—É—Ç—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–º—Ç—å –ø–ª–∞—Ç—ë–∂ —Å–Ω–æ–≤–∞ \n\n\n' \
        f'–ö –æ–ø–ª–∞—Ç–µ {payment["coast_with_commission"]} —Ä—É–±–ª–µ–π + 2% –∫–æ–º–∏—Å—Å–∏–∏ QIWI.\n\n' \
        f'–û–ø–ª–∞—Ç–∞ –ø–æ —Å—Å—ã–ª–∫–µ: {payment["pay_url"]}\n\n' \
        f'–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç—ë–∂"\n\n' \
        f'–ï—Å–ª–∏ –≤—ã –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ –∏–ª–∏ –Ω–∞–∂–∞–ª–∏ —Å–ª—É—á–∞–π–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∞"\n\n' \
        '–í —Å–ª—É—á–µ –Ω–µ –æ–ø–ª–∞—Ç—ã, –ø–ª–∞—Ç—ë–∂ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ–Ω–∏—Ç—Å—è —á–µ—Ä–µ–∑ —á–∞—Å –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–∫–∏.'
        message = bot.send_message(call.message.chat.id, text, reply_markup=order_keyboard()) 
        return bot.register_next_step_handler(message, get_qiwi_order)
    elif answer['status']['value'] == 'PAID':
        '''–ó–∞—è–≤–∫–∞ –æ–ø–ª–∞—á–µ–Ω–∞'''
        db.push_value(user_id=call.message.chat.id, key='history_payment', value=payment)
        db.inc_value(user_id=call.message.chat.id, key='balance', value=payment['coast'])
        user = db.get_user_by_id(call.message.chat.id)
        db.set_value(user_id=call.message.chat.id, key='temp_payment', value=None)
        bot.clear_step_handler_by_chat_id(chat_id=call.message.chat.id)
        text = f'–í–∞—à —Å—á—ë—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω, –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–µ–Ω–Ω–æ {payment["coast"]} —Ä—É–±–ª–µ–π.\n\n–í–∞—à –±–∞–ª–∞–Ω—Å - {user["balance"]} —Ä—É–±–ª–µ–π.'
        bot.send_message(call.message.chat.id, text)



######################################################################


@bot.message_handler(regexp="(^–í—ã–≤–æ–¥ –¥–µ–Ω–µ–≥($|\süí∏))")
def transfer_money_start(message):
    '''–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ —Å –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤'''
    user = db.get_user_by_id(message.chat.id)
    system_message_filter(message)
    blocked_filter(message)
    if user['verified_psychologist'] is not True:
        return
    if user['temp_transfer_money']:
        return bot.send_message(chat_id=message.chat.id, text='<b>–í–∞—à–∞ –ø—Ä–æ—à–ª–∞—è –∑–∞—è–≤–∫–∞ –µ—â—ë –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞, –≤—ã–≤–æ–¥ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ—à–ª–æ–π –∑–∞—è–≤–∫–∏.</b>', parse_mode='HTML')
    text = f"<b>–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—ã–≤–æ–¥–∞ {user['balance']} —Ä—É–±.\n–í–Ω–∏–º–∞–Ω–∏–µ! –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞ QIWI –∫–æ—à–µ–ª–µ–∫ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ —Ä—É—á–Ω–æ–º —Ä–µ–∂–∏–º–µ, –¥–µ–Ω—å–≥–∏ –Ω–∞ –≤–∞—à –∫–æ—à–µ–ª—ë–∫ –ø–æ—Å—Ç—É–ø—è—Ç " \
            "–≤ —Ç–µ—á–µ–Ω–∏–∏ —Å—É—Ç–æ–∫ –ø–æ—Å–ª–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –≤—ã–ø–ª–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–æ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Ç–æ–ª—å–∫–æ —Å –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–º QIWI –∫–æ—à–µ–ª—å–∫–æ–º!\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –µ–¥–∏–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ - 10000 —Ä.</b>"
    message = bot.send_message(message.chat.id, text=text, reply_markup=transfer_money_keyboard(), parse_mode='HTML') 



@bot.callback_query_handler(func=lambda call: call.data == 'transfer_money')
def transfer_money_handler(call):
    '''–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–≤–µ—Å—Ç–∏ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞'''
    bot.delete_message(call.message.chat.id, call.message.message_id)
    user = db.get_user_by_id(call.message.chat.id)
    message = bot.send_message(call.message.chat.id, text=f'<b>–ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç—É {user["balance"]} —Ä—É–±.\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞.</b>', reply_markup=cancel_next_handlers(), parse_mode='HTML') 
    bot.register_next_step_handler(message, transfer_money_count)


def transfer_money_count(message):
    '''–ü—Ä–∏–Ω–∏–º–∞–µ–º —Å—É–º–º—É –∏ –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –∫–∏–≤–∏ –∫–æ—à–µ–ª—å–∫–∞'''
    try:
        money = int(message.text)
        user = db.get_user_by_id(message.chat.id)
        if money <= 0 or money > user['balance'] or money > 10000:
            message = bot.send_message(message.chat.id, text=f'<b>–ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç—É {user["balance"]} —Ä—É–±.\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞. (–¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –º–∞–∫—Å–∏–º—É–º 10000—Ä.)</b>', reply_markup=cancel_next_handlers(), parse_mode='HTML') 
            return bot.register_next_step_handler(message, transfer_money_count)
        
        message = bot.send_message(message.chat.id, text=f'<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä QIWI –∫–æ—à–µ–ª—å–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 79001112233.</b>', reply_markup=cancel_next_handlers(), parse_mode='HTML') 
        bot.register_next_step_handler(message, qiwi_account_transfer, money)
    except (ValueError, TypeError) as e:
        message = bot.send_message(message.chat.id, text=f'<b>–ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç—É {user["balance"]} —Ä—É–±.\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞.</b>', reply_markup=cancel_next_handlers(), parse_mode='HTML') 
        bot.register_next_step_handler(message, transfer_money_count)


def qiwi_account_transfer(message, money):
    '''–ü—Ä–∏–Ω–∏–º–∞–µ–º –∫–∏–≤–∏ –∫–æ—à–µ–ª–µ–∫ –∏ –æ—Ç–¥–∞–µ–º –∞–¥–º–∏–Ω—É –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É'''
    try:
        qiwi_account = int(message.text)
        if len(str(qiwi_account)) != 11:
            message = bot.send_message(message.chat.id, text=f'<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä QIWI –∫–æ—à–µ–ª—å–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 79001112233.(–ë–µ–∑ + –∏ 11 —Ü–∏—Ñ—Ä)</b>', reply_markup=cancel_next_handlers(), parse_mode='HTML') 
            return bot.register_next_step_handler(message, qiwi_account_transfer, money)
        data = {
            'user_id': message.chat.id,
            'coast': money,
            'qiwi_account': qiwi_account,
            'date': datetime.utcnow().replace(microsecond=0)
        }
        db.inc_value(user_id=message.chat.id, key='balance', value=-money)
        db.set_value(user_id=message.chat.id, key='temp_transfer_money', value=data)
        return bot.send_message(chat_id=message.chat.id, text='<b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è, –≤–∞–º –ø—Ä–∏–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –∑–∞—è–≤–∫—É.</b>', parse_mode='HTML')
    except (ValueError, TypeError):
        message = bot.send_message(message.chat.id, text=f'<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä QIWI –∫–æ—à–µ–ª—å–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 79001112233.</b>', reply_markup=cancel_next_handlers(), parse_mode='HTML') 
        bot.register_next_step_handler(message, qiwi_account_transfer, money)